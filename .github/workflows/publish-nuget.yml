name: Publish NuGet

permissions:
  contents: write
  packages: write

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (e.g. 0.1.1)'
        required: false

jobs:
  pack-and-push:
    runs-on: windows-2022
    env:
      PROJECT_PATH: Avalonia.Controls.DataGrid.HeaderFilter.csproj
      PACKAGE_ID: Avalonia.Controls.DataGrid.HeaderFilter
      NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Setup .NET 8 (for tooling compatibility)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Dotnet info
        run: dotnet --info

      - name: Restore
        run: dotnet restore $env:PROJECT_PATH

      - name: Determine Version
        id: version
        shell: pwsh
        run: |
          # Prefer manual input
          if ($env:GITHUB_EVENT_NAME -eq 'workflow_dispatch' -and '${{ github.event.inputs.version }}') {
            $ver = '${{ github.event.inputs.version }}'
          }
          # If not provided, try to parse from tag (vX.Y.Z...)
          if (-not $ver) {
            $tag = '${{ github.ref_name }}'
            if ($tag -match '^v(?<v>[0-9]+\.[0-9]+\.[0-9]+.*)$') { $ver = $Matches['v'] }
          }
          # Fallback: read <Version> from csproj
          if (-not $ver) {
            [xml]$xml = Get-Content $env:PROJECT_PATH
            $ver = ($xml.Project.PropertyGroup | ForEach-Object { $_.Version } | Where-Object { $_ } | Select-Object -First 1)
          }
          if (-not $ver) { throw 'Unable to resolve version. Provide input or ensure tag starts with v<version> or csproj contains <Version>.' }
          echo "Resolved version: $ver"
          echo "version=$ver" >> $GITHUB_OUTPUT
          echo "PKGVER=$ver" >> $env:GITHUB_ENV

      - name: Validate Secrets
        shell: pwsh
        run: |
          if (-not $env:NUGET_API_KEY) { throw 'NUGET_API_KEY is not set in repository secrets.' }
          Write-Host "NUGET_API_KEY detected (length:" ($env:NUGET_API_KEY.Length) ")"

      - name: Build & Pack (try default, fallback exclude net9)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $pkgVer = '${{ steps.version.outputs.version }}'
          try {
            dotnet pack $env:PROJECT_PATH -c Release `
              -p:PackageVersion=$pkgVer `
              -p:Version=$pkgVer `
              -p:ContinuousIntegrationBuild=true `
              --no-restore `
              -o nupkg
          }
          catch {
            Write-Warning "Default pack failed (likely net9). Retrying with ExcludeTargetFrameworks=net9.0. Details: $($_.Exception.Message)"
            dotnet pack $env:PROJECT_PATH -c Release `
              -p:PackageVersion=$pkgVer `
              -p:Version=$pkgVer `
              -p:ContinuousIntegrationBuild=true `
              -p:ExcludeTargetFrameworks=net9.0 `
              --no-restore `
              -o nupkg
          }

      - name: Show packages
        run: dir nupkg

      - name: Push package
        run: >-
          dotnet nuget push "nupkg/$env:PACKAGE_ID.${{ steps.version.outputs.version }}.nupkg"
          --api-key ${{ secrets.NUGET_API_KEY }}
          --source https://api.nuget.org/v3/index.json
          --skip-duplicate

      - name: Push symbols
        run: >-
          dotnet nuget push "nupkg/$env:PACKAGE_ID.${{ steps.version.outputs.version }}.snupkg"
          --api-key ${{ secrets.NUGET_API_KEY }}
          --source https://api.nuget.org/v3/index.json
          --skip-duplicate
        continue-on-error: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: v${{ steps.version.outputs.version }}
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}
          files: |
            nupkg/*.nupkg
            nupkg/*.snupkg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
