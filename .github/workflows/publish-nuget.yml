name: Publish NuGet

permissions:
  contents: write
  packages: write

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (e.g. 0.1.1)'
        required: false

jobs:
  pack-and-push:
    runs-on: windows-2022
    env:
      PROJECT_PATH: Avalonia.Controls.DataGrid.HeaderFilter.csproj
      PACKAGE_ID: Avalonia.Controls.DataGrid.HeaderFilter
      NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Setup .NET 8 (for tooling compatibility)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Dotnet info
        run: dotnet --info

      - name: Restore
        run: dotnet restore $env:PROJECT_PATH

      - name: Determine Version
        id: version
        shell: pwsh
        run: |
          # Prefer manual input
          if ($env:GITHUB_EVENT_NAME -eq 'workflow_dispatch' -and '${{ github.event.inputs.version }}') {
            $ver = '${{ github.event.inputs.version }}'
          }
          # If not provided, try to parse from tag (vX.Y.Z...)
          if (-not $ver) {
            $tag = '${{ github.ref_name }}'
            if ($tag -match '^v(?<v>[0-9]+\.[0-9]+\.[0-9]+.*)$') { $ver = $Matches['v'] }
          }
          # Fallback: read <Version> from csproj
          if (-not $ver) {
            [xml]$xml = Get-Content $env:PROJECT_PATH
            $ver = ($xml.Project.PropertyGroup | ForEach-Object { $_.Version } | Where-Object { $_ } | Select-Object -First 1)
          }
          if (-not $ver) { throw 'Unable to resolve version. Provide input or ensure tag starts with v<version> or csproj contains <Version>.' }
          Write-Host "Resolved version: $ver"
          # Write step output and also export as env for later steps
          Add-Content -Path $env:GITHUB_OUTPUT -Value "version=$ver"
          Add-Content -Path $env:GITHUB_ENV -Value "PKGVER=$ver"

      - name: Validate Secrets
        shell: pwsh
        run: |
          if (-not $env:NUGET_API_KEY) { throw 'NUGET_API_KEY is not set in repository secrets.' }
          Write-Host "NUGET_API_KEY detected (length:" ($env:NUGET_API_KEY.Length) ")"

      - name: Build (with net9, fallback without)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $pkgVer = $env:PKGVER
          function Build-TFMs($tfms) {
            dotnet build $env:PROJECT_PATH -c Release `
              -p:PackageVersion="$pkgVer" `
              -p:Version="$pkgVer" `
              -p:ContinuousIntegrationBuild=true `
              -p:TargetFrameworks=`"$tfms`"
          }
          try {
            Build-TFMs "net9.0;net8.0;net7.0;net6.0"
            $built = "net9.0;net8.0;net7.0;net6.0"
          }
          catch {
            Write-Warning "Build with net9 failed. Retrying without net9. Details: $($_.Exception.Message)"
            Build-TFMs "net8.0;net7.0;net6.0"
            $built = "net8.0;net7.0;net6.0"
          }
          Add-Content -Path $env:GITHUB_ENV -Value "TFMS_BUILT=$built"

      - name: Pack (NoBuild, use built TFMs)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $pkgVer = $env:PKGVER
          $tfms = $env:TFMS_BUILT
          if (-not $tfms) { throw 'TFMS_BUILT is empty. Build step may have failed.' }
          dotnet pack $env:PROJECT_PATH -c Release `
            -p:PackageVersion="$pkgVer" `
            -p:Version="$pkgVer" `
            -p:ContinuousIntegrationBuild=true `
            -p:TargetFrameworks=`"$tfms`" `
            -p:NoBuild=true `
            -o nupkg

      - name: Show packages
        run: dir nupkg

      - name: Push package
        run: >-
          dotnet nuget push "nupkg/$env:PACKAGE_ID.$env:PKGVER.nupkg"
          --api-key ${{ secrets.NUGET_API_KEY }}
          --source https://api.nuget.org/v3/index.json
          --skip-duplicate

      - name: Push symbols
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Continue'
          $symbolPath = "nupkg/$env:PACKAGE_ID.$env:PKGVER.snupkg"
          
          if (-not (Test-Path $symbolPath)) {
            Write-Warning "Symbol package not found at $symbolPath, skipping symbol upload"
            exit 0
          }
          
          Write-Host "Waiting for main package to be processed on NuGet.org..."
          Start-Sleep -Seconds 60
          
          Write-Host "Attempting to push symbol package..."
          
          # Try with different endpoints and retry logic
          $maxRetries = 3
          $retryDelay = 30
          
          for ($i = 1; $i -le $maxRetries; $i++) {
            Write-Host "Attempt $i of $maxRetries"
            
            try {
              # Try the v3 API first (recommended)
              dotnet nuget push $symbolPath `
                --api-key $env:NUGET_API_KEY `
                --source https://api.nuget.org/v3/index.json `
                --skip-duplicate
              Write-Host "Symbol package uploaded successfully!"
              exit 0
            }
            catch {
              Write-Warning "Attempt $i failed with v3 API: $($_.Exception.Message)"
              
              if ($i -lt $maxRetries) {
                Write-Host "Waiting $retryDelay seconds before retry..."
                Start-Sleep -Seconds $retryDelay
              }
            }
          }
          
          Write-Warning "All symbol upload attempts failed. This is non-critical - the main package is already uploaded."
        continue-on-error: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.PKGVER }}
          name: v${{ env.PKGVER }}
          draft: false
          prerelease: ${{ contains(env.PKGVER, '-') }}
          files: |
            nupkg/*.nupkg
            nupkg/*.snupkg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
